" Initialize directories {
function! InitializeDirectories()
   let parent = $HOME
   let prefix = 'vim'
   let dir_list = {
            \ 'backup': 'backupdir',
            \ 'views': 'viewdir',
            \ 'undo': 'undodir',
            \ 'swap': 'directory' }

   let common_dir = parent . '/.' . prefix

   for [dirname, settingname] in items(dir_list)
       let directory = common_dir . dirname . '/'
       if exists("*mkdir")
         if !isdirectory(directory)
            call mkdir(directory)
         endif
       endif
       if !isdirectory(directory)
         echo "Warning: Unable to create backup directory: " . directory
         echo "Try: mkdir -p " . directory
       else
         let directory = substitute(directory, " ", "\\\\ ", "g")
         exec "set " . settingname . "=" . directory
       endif
   endfor
endfunction
call InitializeDirectories()
" }

" Strip whitespace {
function! StripTrailingWhitespace()
   " Preparation: save last search, and cursor position.
   let _s=@/
   let l = line(".")
   let c = col(".")
   " do the business:
   %s/\s\+$//e
   " clean up: restore previous search history, and cursor position
   let @/=_s
   call cursor(l, c)
endfunction
" }

" Print a warning message when saving a file that contains tab characters {
function! WarnOnTabs()
   " do the business:
   redir =>output
   silent exec "%s/\t//gne"
   redir END
   if strlen(output) > 0
      echoerr "Warning: file has indenting tabs!"
   endif
endfunction
" }

" Shell command {
function! s:RunShellCommand(cmdline)
   botright new

   setlocal buftype=nofile
   setlocal bufhidden=delete
   setlocal nobuflisted
   setlocal noswapfile
   setlocal nowrap
   setlocal filetype=shell
   setlocal syntax=shell

   call setline(1, a:cmdline)
   call setline(2, substitute(a:cmdline, '.', '=', 'g'))
   execute 'silent $read !' . escape(a:cmdline, '%#')
   setlocal nomodifiable
   1
endfunction

" }

" Initialize NERDTree as needed {
function! NERDTreeInitAsNeeded()
   redir => bufoutput
   buffers!
   redir END
   let idx = stridx(bufoutput, "NERD_tree")
   if idx > -1
      NERDTreeMirror
      NERDTreeFind
      wincmd l
   endif
endfunction
" }

" http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
" Restore cursor to file position in previous editing session
function! ResCur()
   if line("'\"") <= line("$")
      normal! g`"
      return 1
   endif
endfunction
